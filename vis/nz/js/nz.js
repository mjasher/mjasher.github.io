// Generated by CoffeeScript 1.7.1
var acc, average_tax_rate, best_start, family_tax_credit, in_work_tax_credit, marginal_tax_rate, max_family_tax_credit, max_in_work_tax_credit, net_income, new_parental_tax_credit, parental_tax_credit, tax, theHousehold, total_credits;

theHousehold = {
  income: 60000,
  hours: 30,
  partner: 'single',
  partner_income: 0,
  partner_hours: 20,
  children: [0, 1, 14],
  baby_bonus: 'current_credit',
  combined_income: function() {
    if (this.partner === 'single') {
      return this.income;
    } else {
      return this.income + this.partner_income;
    }
  }
};

tax = function(taxable) {
  if (taxable < 14000) {
    return 0.105 * taxable;
  } else if (taxable < 48000) {
    return 1470 + 0.175 * (taxable - 14000);
  } else if (taxable < 70000) {
    return 7420 + 0.3 * (taxable - 48000);
  } else {
    return 14020 + 0.33 * (taxable - 70000);
  }
};

acc = function(taxable) {
  if (taxable <= 118191) {
    return 0.0145 * taxable;
  } else {
    return 1713.76;
  }
};

max_family_tax_credit = function(children) {
  var age, credit, oldest, _i, _len, _ref;
  if (children.length === 0) {
    return 0;
  }
  credit = 0;
  children.sort(function(a, b) {
    return a < b;
  });
  oldest = children[0];
  if (oldest >= 16) {
    credit += 101.98;
  } else if (oldest >= 13) {
    credit += 92.73;
  } else if (oldest <= 12) {
    credit += 92.73;
  }
  _ref = children.slice(1);
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    age = _ref[_i];
    if (age >= 16) {
      credit += 91.25;
    } else if (age >= 13) {
      credit += 73.5;
    } else if (age <= 12) {
      credit += 64.44;
    }
  }
  return credit;
};

family_tax_credit = function(household) {
  var max_credit;
  max_credit = 52 * max_family_tax_credit(household.children);
  if (max_credit <= 0) {
    return 0;
  } else if (household.combined_income() < 36350) {
    return max_credit;
  } else {
    return Math.max(0, max_credit - 0.2125 * (household.combined_income() - 36350));
  }
};

max_in_work_tax_credit = function(household) {
  var credit;
  credit = 0;
  if ((household.partner === 'single' && household.hours >= 20) || (household.partner === 'couple' && household.hours + household.partner_hours >= 30)) {
    if (household.children.length > 0) {
      credit += 60;
    }
    if (household.children.length > 3) {
      credit += 15 * (household.children.length - 3);
    }
  }
  return credit;
};

in_work_tax_credit = function(household) {
  var max_credit, threshold;
  max_credit = 52 * max_in_work_tax_credit(household);
  if (max_credit <= 0) {
    return 0;
  } else if (family_tax_credit(household) <= 0) {
    threshold = 36350 + 52 * max_family_tax_credit(household.children) / 0.2125;
    return Math.max(0, max_credit - 0.2125 * (household.combined_income() - threshold));
  } else {
    return max_credit;
  }
};

parental_tax_credit = function(household) {
  var age, max_credit;
  max_credit = 150 * 8 * ((function() {
    var _i, _len, _ref, _results;
    _ref = household.children;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      age = _ref[_i];
      if (age < 1) {
        _results.push(age);
      }
    }
    return _results;
  })()).length;
  return max_credit;
};

new_parental_tax_credit = function(household) {
  var age, family_threshold, in_work_threshold, max_credit;
  max_credit = 220 * 10 * ((function() {
    var _i, _len, _ref, _results;
    _ref = household.children;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      age = _ref[_i];
      if (age < 1) {
        _results.push(age);
      }
    }
    return _results;
  })()).length;
  family_threshold = 36350 + 52 * max_family_tax_credit(household.children) / 0.2125;
  in_work_threshold = family_threshold + 52 * max_in_work_tax_credit(household) / 0.2125;
  if (max_credit <= 0) {
    return 0;
  } else if (in_work_tax_credit(household) <= 0) {
    return Math.max(0, max_credit - 0.2125 * (household.combined_income() - in_work_threshold));
  } else {
    return max_credit;
  }
};

best_start = function(household) {
  var age, family_threshold, in_work_threshold, max_credit;
  max_credit = 60 * 52;
  family_threshold = 36350 + 52 * max_family_tax_credit(household.children) / 0.2125;
  in_work_threshold = family_threshold + 52 * max_in_work_tax_credit(household) / 0.2125;
  if (((function() {
    var _i, _len, _ref, _results;
    _ref = household.children;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      age = _ref[_i];
      if (age < 1) {
        _results.push(age);
      }
    }
    return _results;
  })()).length > 0 && household.combined_income() <= 150000) {
    return max_credit;
  } else if (((function() {
    var _i, _len, _ref, _results;
    _ref = household.children;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      age = _ref[_i];
      if (age < 3) {
        _results.push(age);
      }
    }
    return _results;
  })()).length > 0 && household.combined_income() < 50000) {
    return max_credit;
  } else if (((function() {
    var _i, _len, _ref, _results;
    _ref = household.children;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      age = _ref[_i];
      if (age < 3) {
        _results.push(age);
      }
    }
    return _results;
  })()).length > 0 && household.combined_income() < in_work_threshold) {
    return Math.max(0, max_credit - (0.3 - 0.2125) * (household.combined_income() - 50000));
  } else if (((function() {
    var _i, _len, _ref, _results;
    _ref = household.children;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      age = _ref[_i];
      if (age < 3) {
        _results.push(age);
      }
    }
    return _results;
  })()).length > 0) {
    return Math.max(0, max_credit - (0.3 - 0.2125) * (in_work_threshold - 50000) - 0.3 * (household.combined_income() - in_work_threshold));
  } else {
    return 0;
  }
};

total_credits = function(household) {
  if (household.baby_bonus === 'current_credit') {
    return parental_tax_credit(household) + family_tax_credit(household) + in_work_tax_credit(household);
  } else if (household.baby_bonus === 'best_start') {
    return best_start(household) + family_tax_credit(household) + in_work_tax_credit(household);
  } else if (household.baby_bonus === 'new_credit') {
    return new_parental_tax_credit(household) + family_tax_credit(household) + in_work_tax_credit(household);
  }
};

net_income = function(household) {
  return {
    you: household.income - tax(household.income) - acc(household.income) + total_credits(household),
    partner: household.partner_income - tax(household.partner_income) - acc(household.partner_income) + total_credits(household)
  };
};

marginal_tax_rate = function(household) {
  var additional, current, partner, you;
  current = net_income(household).you;
  household.income += 1;
  additional = net_income(household).you;
  household.income -= 1;
  you = 100 * (1 - additional + current);
  current = net_income(household).partner;
  household.partner_income += 1;
  additional = net_income(household).partner;
  household.partner_income -= 1;
  partner = 100 * (1 - additional + current);
  return {
    you: you,
    partner: partner
  };
};

average_tax_rate = function(household) {
  return {
    you: 100 - 100 * net_income(household).you / household.income,
    partner: 100 - 100 * net_income(household).partner / household.partner_income
  };
};
